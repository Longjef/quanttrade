{"version":3,"file":"TradesLog-c1067f34.js","sources":["../../src/shared/charts/binCount.ts","../../src/components/charts/ProfitDistributionChart.vue","../../src/components/charts/CumProfitChart.vue","../../src/components/charts/TradesLog.vue"],"sourcesContent":["export function binData(data: number[], bins: number) {\n  const minimum = Math.min(...data);\n  const maximum = Math.max(...data);\n  const binSize = ((maximum - minimum) * 1.01) / bins;\n  // console.log(`data ranges from ${minimum} to ${maximum}, binsize ${binSize}`);\n  // Count occurances an array with [bucketStart, count in this bucket]\n  const baseBins = [...Array(bins).keys()].map((i) => [\n    Math.round((minimum + i * binSize) * 1000) / 1000,\n    0,\n  ]);\n\n  // console.log(baseBins);\n  for (let i = 0; i < data.length; i++) {\n    const index = Math.min(Math.floor((data[i] - minimum) / binSize), bins - 1);\n    if (!isNaN(index)) {\n      baseBins[index][1]++;\n    }\n  }\n\n  return baseBins;\n}\n","<template>\n  <div class=\"d-flex flex-column h-100 position-relative\">\n    <div class=\"flex-grow-1 order-2\">\n      <e-charts v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n    </div>\n    <b-form-group\n      class=\"w-25 order-1\"\n      :class=\"showTitle ? 'ms-5 ps-5' : 'position-absolute'\"\n      label=\"Bins\"\n      label-for=\"input-bins\"\n      label-cols=\"6\"\n      content-cols=\"6\"\n      size=\"sm\"\n    >\n      <b-form-select\n        id=\"input-bins\"\n        v-model=\"settingsStore.profitDistributionBins\"\n        size=\"sm\"\n        :options=\"binOptions\"\n      ></b-form-select>\n    </b-form-group>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\nimport { binData } from '@/shared/charts/binCount';\nimport { useSettingsStore } from '@/stores/settings';\n\nuse([\n  BarChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Trade count';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => ClosedTrade[] },\n  showTitle: { default: true, type: Boolean },\n});\nconst settingsStore = useSettingsStore();\n// registerTransform(ecStat.transform.histogram);\n// console.log(profits);\n// const data = [[]];\nconst binOptions = [10, 15, 20, 25, 50];\nconst data = computed(() => {\n  const profits = props.trades.map((trade) => trade.profit_ratio);\n\n  return binData(profits, settingsStore.profitDistributionBins);\n});\n\nconst chartOptions = computed((): EChartsOption => {\n  const chartOptionsLoc: EChartsOption = {\n    title: {\n      text: 'Profit distribution',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      source: data.value,\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'line',\n        label: {\n          backgroundColor: '#6a7985',\n        },\n      },\n    },\n    legend: {\n      data: [CHART_PROFIT],\n      right: '5%',\n    },\n    xAxis: {\n      type: 'category',\n      name: 'Profit %',\n      nameLocation: 'middle',\n      nameGap: 25,\n    },\n    yAxis: [\n      {\n        type: 'value',\n        name: CHART_PROFIT,\n        splitLine: {\n          show: false,\n        },\n        nameRotate: 90,\n        nameLocation: 'middle',\n        nameGap: 35,\n        position: 'left',\n      },\n    ],\n    // grid: {\n    // bottom: 80,\n    // },\n\n    series: [\n      {\n        type: 'bar',\n        name: CHART_PROFIT,\n        animation: true,\n        encode: {\n          x: 'x0',\n          y: 'y0',\n        },\n\n        // symbol: 'none',\n      },\n    ],\n  };\n  return chartOptionsLoc;\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","<template>\n  <e-charts v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\n</template>\n\n<script setup lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade, CumProfitData, CumProfitDataPerDate } from '@/types';\nimport { computed, ComputedRef } from 'vue';\nimport { useSettingsStore } from '@/stores/settings';\nimport { dataZoomPartial } from '@/shared/charts/chartZoom';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => ClosedTrade[] },\n  showTitle: { default: true, type: Boolean },\n  profitColumn: { default: 'profit_abs', type: String },\n});\nconst settingsStore = useSettingsStore();\n// const botList = ref<string[]>([]);\n// const cumulativeData = ref<{ date: number; profit: any }[]>([]);\n\nconst cumulativeData: ComputedRef<{ date: number; profit: number }[]> = computed(() => {\n  const res: CumProfitData[] = [];\n  const resD: CumProfitDataPerDate = {};\n  const closedTrades = props.trades\n    .slice()\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n  let profit = 0.0;\n\n  for (let i = 0, len = closedTrades.length; i < len; i += 1) {\n    const trade = closedTrades[i];\n\n    if (trade.close_timestamp && trade[props.profitColumn]) {\n      profit += trade[props.profitColumn];\n      if (!resD[trade.close_timestamp]) {\n        // New timestamp\n        resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\n      } else {\n        // Add to existing profit\n        resD[trade.close_timestamp].profit += trade[props.profitColumn];\n        if (resD[trade.close_timestamp][trade.botId]) {\n          resD[trade.close_timestamp][trade.botId] += trade[props.profitColumn];\n        } else {\n          resD[trade.close_timestamp][trade.botId] = profit;\n        }\n      }\n      res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\n    }\n  }\n  // console.log(resD);\n\n  return Object.entries(resD).map(([k, v]) => {\n    const obj = { date: parseInt(k, 10), profit: v.profit };\n    // TODO: The below could allow \"lines\" per bot\"\n    // this.botList.forEach((botId) => {\n    // obj[botId] = v[botId];\n    // });\n    return obj;\n  });\n});\n\nconst chartOptions = computed((): EChartsOption => {\n  const chartOptionsLoc: EChartsOption = {\n    title: {\n      text: 'Cumulative Profit',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      dimensions: ['date', 'profit'],\n      source: cumulativeData.value,\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'line',\n        label: {\n          backgroundColor: '#6a7985',\n        },\n      },\n    },\n    legend: {\n      data: [CHART_PROFIT],\n      right: '5%',\n    },\n    useUTC: false,\n    xAxis: {\n      type: 'time',\n    },\n    yAxis: [\n      {\n        type: 'value',\n        name: CHART_PROFIT,\n        splitLine: {\n          show: false,\n        },\n        nameRotate: 90,\n        nameLocation: 'middle',\n        nameGap: 40,\n      },\n    ],\n    grid: {\n      bottom: 80,\n    },\n    dataZoom: [\n      {\n        type: 'inside',\n        // xAxisIndex: [0],\n        start: 0,\n\n        end: 100,\n      },\n      {\n        // xAxisIndex: [0],\n        bottom: 10,\n        start: 0,\n        end: 100,\n        ...dataZoomPartial,\n      },\n    ],\n    series: [\n      {\n        type: 'line',\n        name: CHART_PROFIT,\n        animation: true,\n        step: 'end',\n        lineStyle: {\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n        },\n        itemStyle: {\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n        },\n        // symbol: 'none',\n      },\n    ],\n  };\n  // TODO: maybe have profit lines per bot?\n  // this.botList.forEach((botId: string) => {\n  //   console.log('bot', botId);\n  //   chartOptionsLoc.series.push({\n  //     type: 'line',\n  //     name: botId,\n  //     animation: true,\n  //     step: 'end',\n  //     lineStyle: {\n  //       color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n  //     },\n  //     itemStylesettingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n  //     },\n  //     // symbol: 'none',\n  //   });\n  // });\n  return chartOptionsLoc;\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","<template>\n  <e-charts\n    v-if=\"trades.length > 0\"\n    :option=\"chartOptions\"\n    autoresize\n    :theme=\"settingsStore.chartTheme\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\nimport { useSettingsStore } from '@/stores/settings';\nimport { computed } from 'vue';\nimport { timestampms } from '@/shared/formatters';\nimport { dataZoomPartial } from '@/shared/charts/chartZoom';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit %';\nconst CHART_COLOR = '#9be0a8';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => ClosedTrade[] },\n  showTitle: { default: true, type: Boolean },\n});\nconst settingsStore = useSettingsStore();\nconst chartData = computed(() => {\n  const res: (number | string)[][] = [];\n  const sortedTrades = props.trades\n    .slice(0)\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n  for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\n    const trade = sortedTrades[i];\n    const entry = [\n      i,\n      (trade.profit_ratio * 100).toFixed(2),\n      trade.pair,\n      trade.botName,\n      timestampms(trade.close_timestamp),\n      trade.is_short === undefined || !trade.is_short ? 'Long' : 'Short',\n    ];\n    res.push(entry);\n  }\n  return res;\n});\n\nconst chartOptions = computed((): EChartsOption => {\n  // const { chartData } = this;\n  // Show a maximum of 50 trades by default - allowing to zoom out further.\n  const datazoomStart = chartData.value.length > 0 ? (1 - 50 / chartData.value.length) * 100 : 100;\n  return {\n    title: {\n      text: 'Trades log',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      dimensions: ['date', 'profit'],\n      source: chartData.value,\n    },\n    tooltip: {\n      trigger: 'axis',\n      formatter: (params) => {\n        const botName = params[0].data[3] ? ` | ${params[0].data[3]}` : '';\n        return `${params[0].data[2]} | ${params[0].data[5]} ${botName}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\n      },\n      axisPointer: {\n        type: 'line',\n        label: {\n          backgroundColor: '#6a7985',\n        },\n      },\n    },\n    xAxis: {\n      type: 'value',\n      show: false,\n    },\n    yAxis: [\n      {\n        type: 'value',\n        name: CHART_PROFIT,\n        splitLine: {\n          show: false,\n        },\n        nameRotate: 90,\n        nameLocation: 'middle',\n        nameGap: 30,\n      },\n    ],\n    grid: {\n      bottom: 80,\n    },\n    dataZoom: [\n      {\n        type: 'inside',\n        start: datazoomStart,\n        end: 100,\n      },\n      {\n        bottom: 10,\n        start: datazoomStart,\n        end: 100,\n        ...dataZoomPartial,\n      },\n    ],\n    visualMap: [\n      {\n        show: true,\n        seriesIndex: 0,\n        pieces: [\n          {\n            max: 0.0,\n            color: '#f84960',\n          },\n          {\n            min: 0.0,\n            color: '#2ed191',\n          },\n        ],\n      },\n    ],\n    series: [\n      {\n        type: 'bar',\n        name: CHART_PROFIT,\n        barGap: '0%',\n        barCategoryGap: '0%',\n        animation: false,\n        label: {\n          show: true,\n          position: 'top',\n          rotate: 90,\n          offset: [7.5, 7.5],\n          formatter: '{@[1]} %',\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\n        },\n        encode: {\n          x: 0,\n          y: 1,\n        },\n\n        itemStyle: {\n          color: CHART_COLOR,\n        },\n      },\n    ],\n  };\n});\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n"],"names":["binData","data","bins","minimum","binSize","baseBins","i","index","CHART_PROFIT","use","BarChart","CanvasRenderer","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","settingsStore","useSettingsStore","binOptions","computed","profits","props","trade","chartOptions","LineChart","cumulativeData","res","resD","closedTrades","a","b","profit","len","k","v","dataZoomPartial","CHART_COLOR","VisualMapComponent","VisualMapPiecewiseComponent","chartData","sortedTrades","entry","timestampms","datazoomStart","params","botName"],"mappings":"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"}